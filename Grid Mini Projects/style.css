/* ===========
Variables
==============*/

:root {
  --primaryColor: red;
  --darkGrey: #afafaf;
  --mainWhite: #fff;
  --offWhite: #f7f7f7;
  --ff-primary: "Fira Code", monospace;
  --mainTransition: all 0.3s linear;
  --mainSpacing: 0.25rem;
  --radius: 0.5rem;
  --mainBlack: #222;
}

/* ============
Global Styles
==============*/

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
body {
  font-family: var(--ff-primary);
  color: var(--mainBlack);
  background-color: var(--mainWhite);
  line-height: 1.5;
}

a {
  text-decoration: none;
}
img {
  width: 100%;
  display: block;
}
h1,
h2,
h3 {
  text-transform: capitalize;
  letter-spacing: var(--mainSpacing);
  margin-bottom: 1.25rem;
}
h1 {
  font-size: 3rem;
}
h2 {
  margin-bottom: 0;
}
p {
  font-weight: 300;
  font-size: 0.7rem;
  line-height: 2;
}
.btn {
  display: inline-block;
  padding: 0.5rem 1rem;
  text-transform: capitalize;
  border: 3px solid var(--primaryColor);
  color: var(--primaryColor);
  margin: 3rem;
  transition: var(--mainTransition);
}
.btn:hover {
  background-color: var(--primaryColor);
  color: var(--mainWhite);
}

/* ================
Main Navbar
==================*/
.main-navbar {
  background-color: var(--darkGrey);
  padding: 0 2rem;
}
.main-navbar li {
  list-style: none;
}
.main-navbar a {
  text-transform: capitalize;
  display: block;
  padding: 1rem 0;
  color: var(--primaryColor);
  letter-spacing: var(--mainSpacing);
  transition: var(--mainTransition);
}
.main-navbar a:hover {
  color: var(--mainBlack);
}
@media screen and (min-width: 992px) {
  .main-navbar ul {
    /* center the unordered list */
    max-width: 1170px;
    margin: 0 auto;
    /* apply grid to parent element ul to make li's display as columns in bigger screen */
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    /* no need to set for rows if not specified its going to be 1 */
    /* grid-template-rows: 1fr; */
  }
  .main-navbar a {
    text-align: center;
  }
}
/* ===============
hero Page
=================*/
.hero-header {
  width: 100vw;
  min-height: 100vh;
  background-color: rgb(240, 116, 44);
  color: var(--mainWhite);
  display: grid;
  grid-template-columns: 1;
  justify-content: center;
  align-items: center;
}

.hero-banner p {
  width: 80%;
  max-width: 560px;
  font-size: 1rem;
}
@media screen and (min-width: 992px) {
  .hero-header {
    background-image: linear-gradient(
        rgba(248, 98, 61, 0.925),
        rgba(0, 0, 0, 0.75)
      ),
      url("./images/image-2.jpeg");
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
    background-attachment: fixed;
  }
}
/* flexbox */
/* .hero {
  width: 100%;
  height: 100vh;
  background-color: rgb(240, 116, 44);
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  /* padding: 0 2rem; */
/* color: var(--mainWhite);
}
.hero h1 {
  margin-bottom: 1.5rem;
  font-size: 3.5rem;
}
.hero p {
  font-size: 1rem;
  width: 35rem;
} */

/* ===============
cards
=================*/
/* main heading */
.title h1 {
  color: var(--mainBlack);
  text-align: center;
  text-transform: capitalize;
  font-weight: 400;
}
.cards {
  padding: 4rem 0;
}
/* main parent div for cards */
.cards-center {
  width: 90vw;
  max-width: 1170px;
  margin: 2rem auto;
}
/* h3 */
.card-title {
  margin-bottom: 0.5rem;
}
/* single card */
.card {
  border: 2px solid var(--darkGrey);
  margin-bottom: 2rem;
}
/* card info h3 + p  */
.card-info {
  padding: 1rem;
}
/* div having i inside span */
.card-footer {
  background-color: var(--darkGrey);
  padding: 0.5rem 1rem;
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  justify-items: center;
}
.card-footer span {
  color: var(--primaryColor);
}
.card-footer i {
  font-size: 1rem;
}
/* targetting every single card and applying grid on a card itself- children: 1.img 2.card-info div having h3 and p(which can be bigger for any card in compare to others) 3. card-footer having span. so now to avoid whole card streching up we can set individually. column single card be 1fr  */
/* 3rows 1 for each child item  */
/* for img we want auto height as all would be of same height; for footer too we want auto but for info item we want 1fr which would be responsive  */
.card {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: auto 1fr auto;
  /* can even do grid-template-rows: 1fr 1fr 1fr; but wont be a best look!! */
}

/* with media queries  */
@media screen and (min-width: 768px) {
  .cards-center {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-column-gap: 2rem;
    justify-content: space-between;
  }
}
@media screen and (min-width: 992px) {
  .cards-center {
    grid-template-columns: repeat(3, 1fr);
  }
}
@media screen and (min-width: 1170px) {
  .cards-center {
    grid-template-columns: repeat(4, 1fr);
  }
}

/* without media queries and using auto-fit auto-fill minmax for bigger screen layout!! */
/* for bigger screen we want max width 1170px 
 /* removing gap of 64px we get 1106px for 3 cards as we want 3 cards on bigger screen i.e at 1170px  */
/*so each card will have 1106/3 px width = 368.6666  */
/* for 4 cards column 32* 4 = 96px gap */
/* (1170-96)/4 === 268.5px


.cards-center {
  display: grid;
  grid-column-gap: 2rem;
  grid-template-columns: repeat(auto-fill, minmax(230px, 1fr));
/* } */

/* ===============
tiles
================*/
.tiles {
  padding: 3rem 0;
}
.tile-title h1 {
  text-align: center;
}
.tiles-center {
  width: 90vw;
  max-width: 1170px;
  margin: 2rem auto;
  display: grid;
  grid-row-gap: 2rem;
}
@media screen and (min-width: 768px) {
  .tiles-center {
    grid-template-columns: 1fr 1fr;
    grid-column-gap: 2rem;
  }
}
@media screen and (min-width: 992px) {
  .tiles-center {
    grid-template-columns: repeat(3, 1fr);
    grid-column-gap: 2rem;
  }
}
@media screen and (min-width: 1170px) {
  .tiles-center {
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: repeat(5, 200px);
    grid-template-areas:
      "a a a b"
      "a a a c"
      "d d d d"
      "e f f f"
      "e g h i";
  }
  .tiles img {
    height: 100%;
    object-fit: cover;
  }
  .tile-1 {
    /* grid-column: 1/4;
    grid-row: 1/3; */
    grid-area: a;
  }
  .tile-2 {
    /* grid-column: 4/5;
    grid-row: 1/2; */
    grid-area: b;
  }

  .tile-3 {
    /* grid-column: 4/5;
    grid-row: 2/3; */
    grid-area: c;
  }
  .tile-4 {
    /* grid-column: 1/-1;
    grid-row: 3/4; */
    grid-area: d;
  }
  .tile-5 {
    /* grid-column: 1/2;
    grid-row: 4/6; */
    grid-area: e;
  }
  .tile-6 {
    /* grid-column: 2/5;
    grid-row: 4/5; */
    grid-area: f;
  }
  .tile-7 {
    /* grid-column: 2/3;
    grid-row: 5/6; */
    grid-area: g;
  }
  .tile-8 {
    /* grid-column: 3/4;
    grid-row: 5/6; */
    grid-area: h;
  }
  .tile-9 {
    /* grid-column: 4/5;
    grid-row: 5/6; */
    grid-area: i;
  }
}

/* ===================
layout page
======================*/
.layouts {
  margin-bottom: 2rem;
}
.layout-title h2 {
  background-color: var(--primaryColor);
  color: var(--mainWhite);
  padding: 0.5rem 1rem;
  text-align: center;
}
.link-div {
  background-color: var(--darkGrey);
  padding: 0.5rem 1rem;
}
.link-list {
  list-style: none;
}
.link-list a {
  color: var(--mainBlack);
  font-size: 1.25rem;
  font-weight: 400;
  text-transform: capitalize;
  font-family: var(--ff-primary);
  letter-spacing: var(--mainSpacing);
  display: block;
  padding: 1rem 0;
  transition: var(--mainTransition);
}
.link-list a:hover {
  color: var(--mainWhite);
}
.layout-info {
  width: 90vw;
  margin: 1rem auto;
}
.layout-info p {
  font-size: 1rem;
  line-height: 2;
}
.layout-icons {
  background-color: var(--primaryColor);
  padding: 1rem 1.5rem;
  color: var(--mainWhite);
  font-size: 1.2rem;
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  justify-items: center;
}
.layout-footer {
  background-color: var(--mainBlack);
  color: var(--mainWhite);
  padding: 0.75rem 1rem;
  text-align: center;
}
.layout-footer h2 {
  font-family: var(--ff-primary);
  font-weight: 300;
  font-size: 1.25rem;
  letter-spacing: 0;
}
@media screen and (min-width: 768px) {
  .layouts {
    min-height: 100vh;
    display: grid;
    grid-template-rows: auto auto 1fr auto auto;
  }
  .link-list {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    padding: 0rem;
  }
  .link-list a {
    text-align: center;
  }
}
@media screen and (min-width: 992px) {
  .layouts {
    display: grid;
    grid-template-rows: auto 1fr auto;
    grid-template-columns: auto 1fr auto;
    grid-template-areas:
      "a a a"
      "b c d"
      "e e e";
  }
  .layout-info {
    width: 80vw;
    /* max-width: 900px; */
    grid-area: c;
    padding: 1rem 1.5rem;
  }
  .layout-title {
    grid-area: a;
  }
  .layout-footer {
    grid-area: e;
  }
  .link-div {
    width: 15vw;
    grid-area: b;
  }
  .layout-icons {
    background-color: var(--darkGrey);
    width: 5vw;
    grid-area: d;
  }
  .link-list {
    display: grid;
    grid-template-rows: repeat(4, 1fr);
    grid-template-columns: 1fr;
    align-items: center;
    /* for align-items to work we need to specify min-height: 100% */
    min-height: 100%;
  }

  .layout-icons {
    display: grid;
    grid-template-rows: repeat(4, 1fr);
    grid-template-columns: 1fr;
    align-items: center;
    min-height: 100%;
  }
}
